import os
import asyncio
import json
import hmac
import hashlib
from urllib.parse import parse_qsl

from aiohttp import web
import aiohttp_cors
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import MenuButtonWebApp, WebAppInfo

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
BOT_TOKEN = os.getenv("BOT_TOKEN")
# –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π —Å–∞–π—Ç
WEB_APP_URL = "https://sergeucher96.github.io/ChatMaker/" 
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 8080))

# --- –ö–û–î –ë–û–¢–ê ---
bot = Bot(BOT_TOKEN)
dp = Dispatcher()
app = web.Application()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start (–í–û–ó–í–†–ê–©–ê–ï–ú –ï–ì–û –ù–ê –ú–ï–°–¢–û) ---
@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç /start
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é" –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=MenuButtonWebApp(
            text="–°–æ–∑–¥–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—é", # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏–π.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—é' –≤ –º–µ–Ω—é üëá"
    )

def validate_init_data(init_data: str, bot_token: str) -> (bool, dict):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram"""
    try:
        parsed_data = dict(parse_qsl(init_data))
        received_hash = parsed_data.pop('hash')
        data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items()))
        
        secret_key = hmac.new("WebAppData".encode(), bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

        if calculated_hash == received_hash:
            user_data = json.loads(parsed_data['user'])
            return True, user_data
        
        return False, None
    except Exception:
        return False, None

async def upload_photo_handler(request: web.Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –æ—Ç Web App –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        data = await request.post()
        photo_field = data.get('photo')
        init_data_str = data.get('initData')

        if not photo_field or not init_data_str:
            return web.json_response({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ.'}, status=400)

        is_valid, user_data = validate_init_data(init_data_str, BOT_TOKEN)
        if not is_valid:
            return web.json_response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'}, status=403)
        
        user_id = user_data['id']
        photo_bytes = photo_field.file.read()

        input_photo = types.BufferedInputFile(photo_bytes, filename="story.jpg")
        await bot.send_photo(
            chat_id=user_id,
            photo=input_photo,
            caption="–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞!"
        )
        
        return web.json_response({'status': 'ok'}, status=200)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return web.json_response({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'}, status=500)
        
async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞, —á—Ç–æ–±—ã –æ–Ω –ø–æ–ª—É—á–∞–ª —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
    await bot.set_webhook(webhook_url)
    print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")

async def main_bot_logic(dp: Dispatcher):
    """–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –æ—Ç Telegram"""
    # –ó–¥–µ—Å—å –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º start_polling, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫–∏
    print("–õ–æ–≥–∏–∫–∞ –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∏–µ–º—É –≤–µ–±—Ö—É–∫–æ–≤...")


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
async def webhook_handler(request: web.Request):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    update_data = await request.json()
    update = types.Update(**update_data)
    # –ü–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await dp.feed_update(bot=bot, update=update)
    return web.Response()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    # --- –ù–ê–°–¢–†–û–ô–ö–ê CORS ---
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(
                allow_credentials=True, expose_headers="*", allow_headers="*",
            )
    })
    
    # "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º" –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª–∞ CORS
    upload_route = app.router.add_post('/upload', upload_photo_handler)
    cors.add(upload_route)

    # "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–∞ CORS (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    webhook_route = app.router.add_post(f'/{BOT_TOKEN}', webhook_handler)
    cors.add(webhook_route)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∑–∞–ø—É—Å–∫–µ –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞
    app.on_startup.append(on_startup)
    
    # --- –ó–ê–ü–£–°–ö –í–ï–ë-–°–ï–†–í–ï–†–ê ---
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
    await site.start()
    
    print(f"–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
    asyncio.create_task(main_bot_logic(dp))
    
    # –ß—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è
    await asyncio.Event().wait()


if __name__ == '__main__':
    asyncio.run(main())
