import os
import asyncio
import traceback
from io import BytesIO

from aiohttp import web
import aiohttp_cors
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEB_APP_URL = "https://sergeucher96.github.io/ChatMaker/"
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 10000))

# =========================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# =========================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot=bot)
app = web.Application()

# =========================
# –ö–æ–º–∞–Ω–¥–∞ /start
# =========================
@dp.message(Command(commands=["start"]))
async def command_start_handler(message: types.Message):
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ WebApp
    await bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=types.MenuButtonWebApp(
            text="–°–æ–∑–¥–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—é",
            web_app=types.WebAppInfo(url=WEB_APP_URL)
        )
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—é' –≤ –º–µ–Ω—é üëá, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä."
    )

# =========================
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç WebApp
# =========================
async def upload_photo_handler(request: web.Request):
    try:
        data = await request.post()
        print("Received data:", data)

        photo_field = data.get('photo')
        user_id_str = data.get('user_id')

        if not photo_field:
            return web.json_response({'error': '–ù–µ—Ç —Ñ–æ—Ç–æ'}, status=400)
        if not user_id_str:
            return web.json_response({'error': '–ù–µ—Ç user_id'}, status=400)

        try:
            user_id = int(user_id_str)
        except ValueError:
            return web.json_response({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id'}, status=400)

        # –ß—Ç–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        photo_bytes = await photo_field.read()
        if not photo_bytes:
            return web.json_response({'error': '–ü—É—Å—Ç–æ–µ —Ñ–æ—Ç–æ'}, status=400)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        photo_file = types.InputFile(BytesIO(photo_bytes), filename="story.png")
        await bot.send_photo(
            chat_id=user_id,
            photo=photo_file,
            caption="–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞!"
        )

        return web.json_response({'status': 'ok'})

    except Exception as e:
        traceback.print_exc()
        return web.json_response({'error': str(e)}, status=500)

# =========================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
# =========================
cors = aiohttp_cors.setup(app, defaults={
    "*": aiohttp_cors.ResourceOptions(
        allow_credentials=True,
        expose_headers="*",
        allow_headers="*"
    )
})
resource = cors.add(app.router.add_resource("/upload"))
cors.add(resource.add_route("POST", upload_photo_handler))

# =========================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =========================
async def run_bot():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception:
        traceback.print_exc()

# =========================
# –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
# =========================
async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(run_bot())

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
    await site.start()
    print(f"–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    await asyncio.Event().wait()

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    asyncio.run(main())
