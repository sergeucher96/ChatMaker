import os
import asyncio
import json
import hmac
import hashlib
from urllib.parse import parse_qsl

from aiohttp import web
import aiohttp_cors
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import MenuButtonWebApp, WebAppInfo

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç –≤–∑—è—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Render (Environment Variables)
BOT_TOKEN = os.getenv("BOT_TOKEN") 

# –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π —Å–∞–π—Ç –Ω–∞ GitHub Pages
WEB_APP_URL = "https://sergeucher96.github.io/ChatMaker/" 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = int(os.getenv("PORT", 10000))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = web.Application()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ---
@dp.message(CommandStart())
async def command_start_handler(message: types.Message):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ /start.
    –û–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç Web App –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.
    """
    await bot.set_chat_menu_button(
        chat_id=message.chat.id,
        menu_button=MenuButtonWebApp(
            text="–°–æ–∑–¥–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—é", # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
    )
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏–π.\n\n"
        "–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –ò—Å—Ç–æ—Ä–∏—é' –≤ –º–µ–Ω—é üëá"
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–†–ò–ï–ú–ê –ö–ê–†–¢–ò–ù–ö–ò –û–¢ WEB APP ---
def validate_init_data(init_data: str, bot_token: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Web App."""
    try:
        parsed_data = dict(parse_qsl(init_data))
        received_hash = parsed_data.pop('hash')
        data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items()))
        
        secret_key = hmac.new("WebAppData".encode(), bot_token.encode(), hashlib.sha256).digest()
        calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

        if calculated_hash == received_hash:
            user_data = json.loads(parsed_data['user'])
            return True, user_data
        return False, None
    except Exception:
        return False, None

async def upload_photo_handler(request: web.Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –Ω–∞ /upload."""
    try:
        data = await request.post()
        photo_field = data.get('photo')
        init_data_str = data.get('initData')

        if not photo_field or not init_data_str:
            return web.json_response({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.'}, status=400)

        is_valid, user_data = validate_init_data(init_data_str, BOT_TOKEN)
        if not is_valid or not user_data:
            return web.json_response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.'}, status=403)
        
        user_id = user_data['id']
        photo_bytes = photo_field.file.read()

        await bot.send_photo(
            chat_id=user_id,
            photo=types.BufferedInputFile(photo_bytes, filename="story.jpg"),
            caption="–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞! –¢–µ–ø–µ—Ä—å –µ–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å."
        )
        return web.json_response({'status': 'ok'}, status=200)
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        return web.json_response({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.'}, status=500)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô –û–¢ TELEGRAM (–í–ï–ë–•–£–ö) ---
async def webhook_handler(request: web.Request):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start) –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ aiogram."""
    update_data = await request.json()
    update = types.Update(**update_data)
    await dp.feed_update(bot=bot, update=update)
    return web.Response()

# --- –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê ---
async def on_startup(app_instance):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞."""
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
    await bot.set_webhook(webhook_url)
    print(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    cors = aiohttp_cors.setup(app, defaults={
        "*": aiohttp_cors.ResourceOptions(allow_credentials=True, expose_headers="*", allow_headers="*")
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏ –¥–ª—è –≤–µ–±—Ö—É–∫–∞
    upload_route = app.router.add_post('/upload', upload_photo_handler)
    cors.add(upload_route)
    webhook_route = app.router.add_post(f'/{BOT_TOKEN}', webhook_handler)
    cors.add(webhook_route)

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    app.on_startup.append(on_startup)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)
    await site.start()
    
    print(f"–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
    await asyncio.Event().wait()

if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    asyncio.run(main())
